{"version":3,"file":"recordedClient.js","sourceRoot":"","sources":["../../../../test/public/utils/recordedClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,QAAQ,EAAoB,GAAG,EAAE,MAAM,4BAA4B,CAAC;AAC7E,OAAO,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AAO3C,MAAM,mBAAmB,GAA4B;IACnD,qCAAqC,EACnC,2DAA2D;IAC7D,cAAc,EAAE,wBAAwB;IACxC,iBAAiB,EAAE,0BAA0B;CAC9C,CAAC;AAEF,MAAM,gBAAgB,GAAqB;IACzC,0BAA0B,EAAE;QAC1B;YACE,gBAAgB,EAAE,GAAG,CAAC,qCAAqC;YAC3D,cAAc,EAAE,mBAAmB,CAAC,uCAAuC,CAAC;SAC7E;KACF;IACD,gBAAgB,EAAE;QAChB,EAAE,GAAG,EAAE,qBAAqB,EAAE,KAAK,EAAE,WAAW,EAAE;QAClD;YACE,GAAG,EAAE,oBAAoB;YACzB,KAAK,EAAE,sEAAsE;SAC9E;KACF;IACD,aAAa,EAAE;QACb;YACE,KAAK,EAAE,IAAI;YACX,MAAM,EAAE,0BAA0B;YAClC,KAAK,EAAE,8BAA8B;SACtC;KACF;IACD,cAAc,EAAE;QACd;YACE,KAAK,EAAE,IAAI;YACX,MAAM,EAAE,sBAAsB;YAC9B,KAAK,EAAE,eAAe;SACvB;KACF;CACF,CAAC;AAEF,MAAM,CAAC,KAAK,UAAU,cAAc,CAAC,OAAyB;IAC5D,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,OAAO,CAAC,CAAC;IACvC,MAAM,QAAQ,CAAC,KAAK,CAAC,EAAE,mBAAmB,EAAE,CAAC,CAAC;IAC9C,MAAM,QAAQ,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;IACvE,MAAM,QAAQ,CAAC,UAAU,CAAC,sBAAsB,EAAE;QAChD,eAAe,EAAE;YACf,iBAAiB;YACjB,qBAAqB,EAAE,4CAA4C;SACpE;KACF,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,6CAA6C,CACjE,OAAgB;;IAEhB,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAE3D,MAAM,MAAM,GAAG,IAAI,WAAW,CAC5B,MAAA,GAAG,CAAC,qCAAqC,mCAAI,EAAE,EAC/C,QAAQ,CAAC,sBAAsB,CAAC,EAAE,CAAC,CACpC,CAAC;IACF,OAAO;QACL,MAAM,EAAE,MAAM;QACd,QAAQ;KACT,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Context, Test } from \"mocha\";\nimport { Recorder, SanitizerOptions, env } from \"@azure-tools/test-recorder\";\nimport { EmailClient } from \"../../../src\";\n\nexport interface RecordedEmailClient {\n  client: EmailClient;\n  recorder: Recorder;\n}\n\nconst envSetupForPlayback: { [k: string]: string } = {\n  COMMUNICATION_CONNECTION_STRING_EMAIL:\n    \"endpoint=https://someEndpoint/;accesskey=someAccessKeyw==\",\n  SENDER_ADDRESS: \"someSender@contoso.com\",\n  RECIPIENT_ADDRESS: \"someRecipient@domain.com\",\n};\n\nconst sanitizerOptions: SanitizerOptions = {\n  connectionStringSanitizers: [\n    {\n      actualConnString: env.COMMUNICATION_CONNECTION_STRING_EMAIL,\n      fakeConnString: envSetupForPlayback[\"COMMUNICATION_CONNECTION_STRING_EMAIL\"],\n    },\n  ],\n  headerSanitizers: [\n    { key: \"x-ms-content-sha256\", value: \"Sanitized\" },\n    {\n      key: \"Operation-Location\",\n      value: \"https://someEndpoint/emails/operations/someId?api-version=2023-03-31\",\n    },\n  ],\n  uriSanitizers: [\n    {\n      regex: true,\n      target: `emails/operations/.*?api`,\n      value: \"emails/operations/someId?api\",\n    },\n  ],\n  bodySanitizers: [\n    {\n      regex: true,\n      target: `\"id\"\\\\s?:\\\\s?\"[^\"]*\"`,\n      value: `\"id\":\"someId\"`,\n    },\n  ],\n};\n\nexport async function createRecorder(context: Test | undefined): Promise<Recorder> {\n  const recorder = new Recorder(context);\n  await recorder.start({ envSetupForPlayback });\n  await recorder.addSanitizers(sanitizerOptions, [\"record\", \"playback\"]);\n  await recorder.setMatcher(\"CustomDefaultMatcher\", {\n    excludedHeaders: [\n      \"Accept-Language\", // This is env-dependent\n      \"x-ms-content-sha256\", // This is dependent on the current datetime\n    ],\n  });\n  return recorder;\n}\n\nexport async function createRecordedEmailClientWithConnectionString(\n  context: Context\n): Promise<RecordedEmailClient> {\n  const recorder = await createRecorder(context.currentTest);\n\n  const client = new EmailClient(\n    env.COMMUNICATION_CONNECTION_STRING_EMAIL ?? \"\",\n    recorder.configureClientOptions({})\n  );\n  return {\n    client: client,\n    recorder,\n  };\n}\n"]}