// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { KnownEmailSendStatus } from "../../src";
import { env } from "@azure-tools/test-recorder";
import { assert } from "chai";
import { createRecordedEmailClientWithConnectionString } from "./utils/recordedClient";
describe(`EmailClient [Playback/Live]`, function () {
    let recorder;
    let client;
    beforeEach(async function () {
        ({ client, recorder } = await createRecordedEmailClientWithConnectionString(this));
    });
    afterEach(async function () {
        var _a;
        if (!((_a = this.currentTest) === null || _a === void 0 ? void 0 : _a.isPending())) {
            await recorder.stop();
        }
    });
    it("successfully sends an email to a single recipient", async function () {
        const emailMessage = {
            senderAddress: env.SENDER_ADDRESS || "",
            recipients: {
                to: [
                    {
                        address: env.RECIPIENT_ADDRESS || "",
                        displayName: "someRecipient",
                    },
                ],
            },
            content: {
                subject: "someSubject",
                plainText: "somePlainTextBody",
                html: "<html><h1>someHtmlBody</html>",
            },
        };
        const poller = await client.beginSend(emailMessage);
        const response = await poller.pollUntilDone();
        assert.isTrue(response.status === KnownEmailSendStatus.Succeeded);
    }).timeout(120000);
    it("successfully sends an email to multiple types of recipients", async function () {
        var _a, _b, _c, _d, _e;
        const emailMessage = {
            senderAddress: (_a = env.SENDER_ADDRESS) !== null && _a !== void 0 ? _a : "",
            recipients: {
                to: [
                    {
                        address: (_b = env.RECIPIENT_ADDRESS) !== null && _b !== void 0 ? _b : "",
                        displayName: "someRecipient",
                    },
                    {
                        address: (_c = env.RECIPIENT_ADDRESS) !== null && _c !== void 0 ? _c : "",
                        displayName: "someRecipient",
                    },
                ],
                cc: [
                    {
                        address: (_d = env.RECIPIENT_ADDRESS) !== null && _d !== void 0 ? _d : "",
                        displayName: "someRecipient",
                    },
                ],
                bcc: [
                    {
                        address: (_e = env.RECIPIENT_ADDRESS) !== null && _e !== void 0 ? _e : "",
                        displayName: "someRecipient",
                    },
                ],
            },
            content: {
                subject: "someSubject",
                plainText: "somePlainTextBody",
                html: "<html><h1>someHtmlBody</html>",
            },
        };
        const poller = await client.beginSend(emailMessage);
        const response = await poller.pollUntilDone();
        assert.isTrue(response.status === KnownEmailSendStatus.Succeeded);
    }).timeout(120000);
    it("successfully sends an email with an attachment", async function () {
        var _a, _b;
        const emailMessage = {
            senderAddress: (_a = env.SENDER_ADDRESS) !== null && _a !== void 0 ? _a : "",
            recipients: {
                to: [
                    {
                        address: (_b = env.RECIPIENT_ADDRESS) !== null && _b !== void 0 ? _b : "",
                        displayName: "someRecipient",
                    },
                ],
            },
            content: {
                subject: "someSubject",
                plainText: "somePlainTextBody",
                html: "<html><h1>someHtmlBody</html>",
            },
            attachments: [
                {
                    name: "readme.txt",
                    contentType: "text/plain",
                    contentInBase64: "ZW1haWwgdGVzdCBhdHRhY2htZW50",
                },
            ],
        };
        const poller = await client.beginSend(emailMessage);
        const response = await poller.pollUntilDone();
        assert.isTrue(response.status === KnownEmailSendStatus.Succeeded);
    }).timeout(120000);
});
//# sourceMappingURL=emailClient.spec.js.map