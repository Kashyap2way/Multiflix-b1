{"version":3,"file":"emailClient.spec.js","sourceRoot":"","sources":["../../../test/public/emailClient.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { EmailClient, EmailMessage, KnownEmailSendStatus } from \"../../src\";\nimport { Recorder, env } from \"@azure-tools/test-recorder\";\nimport { Context } from \"mocha\";\nimport { assert } from \"chai\";\nimport { createRecordedEmailClientWithConnectionString } from \"./utils/recordedClient\";\n\ndescribe(`EmailClient [Playback/Live]`, function () {\n  let recorder: Recorder;\n  let client: EmailClient;\n\n  beforeEach(async function (this: Context) {\n    ({ client, recorder } = await createRecordedEmailClientWithConnectionString(this));\n  });\n\n  afterEach(async function (this: Context) {\n    if (!this.currentTest?.isPending()) {\n      await recorder.stop();\n    }\n  });\n\n  it(\"successfully sends an email to a single recipient\", async function () {\n    const emailMessage: EmailMessage = {\n      senderAddress: env.SENDER_ADDRESS || \"\",\n      recipients: {\n        to: [\n          {\n            address: env.RECIPIENT_ADDRESS || \"\",\n            displayName: \"someRecipient\",\n          },\n        ],\n      },\n      content: {\n        subject: \"someSubject\",\n        plainText: \"somePlainTextBody\",\n        html: \"<html><h1>someHtmlBody</html>\",\n      },\n    };\n\n    const poller = await client.beginSend(emailMessage);\n    const response = await poller.pollUntilDone();\n\n    assert.isTrue(response.status === KnownEmailSendStatus.Succeeded);\n  }).timeout(120000);\n\n  it(\"successfully sends an email to multiple types of recipients\", async function () {\n    const emailMessage: EmailMessage = {\n      senderAddress: env.SENDER_ADDRESS ?? \"\",\n      recipients: {\n        to: [\n          {\n            address: env.RECIPIENT_ADDRESS ?? \"\",\n            displayName: \"someRecipient\",\n          },\n          {\n            address: env.RECIPIENT_ADDRESS ?? \"\",\n            displayName: \"someRecipient\",\n          },\n        ],\n        cc: [\n          {\n            address: env.RECIPIENT_ADDRESS ?? \"\",\n            displayName: \"someRecipient\",\n          },\n        ],\n        bcc: [\n          {\n            address: env.RECIPIENT_ADDRESS ?? \"\",\n            displayName: \"someRecipient\",\n          },\n        ],\n      },\n      content: {\n        subject: \"someSubject\",\n        plainText: \"somePlainTextBody\",\n        html: \"<html><h1>someHtmlBody</html>\",\n      },\n    };\n\n    const poller = await client.beginSend(emailMessage);\n    const response = await poller.pollUntilDone();\n\n    assert.isTrue(response.status === KnownEmailSendStatus.Succeeded);\n  }).timeout(120000);\n\n  it(\"successfully sends an email with an attachment\", async function () {\n    const emailMessage: EmailMessage = {\n      senderAddress: env.SENDER_ADDRESS ?? \"\",\n      recipients: {\n        to: [\n          {\n            address: env.RECIPIENT_ADDRESS ?? \"\",\n            displayName: \"someRecipient\",\n          },\n        ],\n      },\n      content: {\n        subject: \"someSubject\",\n        plainText: \"somePlainTextBody\",\n        html: \"<html><h1>someHtmlBody</html>\",\n      },\n      attachments: [\n        {\n          name: \"readme.txt\",\n          contentType: \"text/plain\",\n          contentInBase64: \"ZW1haWwgdGVzdCBhdHRhY2htZW50\",\n        },\n      ],\n    };\n\n    const poller = await client.beginSend(emailMessage);\n    const response = await poller.pollUntilDone();\n\n    assert.isTrue(response.status === KnownEmailSendStatus.Succeeded);\n  }).timeout(120000);\n});\n"]}